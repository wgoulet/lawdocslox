package com.lawdocslox.app;
import java.lang.System;
import com.lawdocslox.app.KeyObj;
import org.bouncycastle.crypto.generators.*;
import org.bouncycastle.crypto.digests.*;
import org.bouncycastle.crypto.examples.DESExample;
import org.bouncycastle.crypto.params.KDFParameters;
import org.bouncycastle.crypto.prng.DigestRandomGenerator;
import org.bouncycastle.crypto.prng.ThreadedSeedGenerator;

class KeyObjFactory {
    private static byte[] secret;
    private static byte[] iv;
    private static byte[] seed;
    public static void setSecret(byte[] in) 
    {
	    secret = new byte[in.length];
	    System.arraycopy(in, 0, secret, 0, in.length);
    }
    public static void genIV()
    {
	    iv = new byte[200];
	    SHA256Digest d = new SHA256Digest();
	    d.update(seed, 0, seed.length);
	    DigestRandomGenerator dr = new DigestRandomGenerator(d);
	    dr.nextBytes(iv);
    }
    /* Generates a random value that can be used as a seed
    *   value for cryptographic operations
    *	@param	int size	an int indicating the size in bytes
    *	of the value to be generated.
    *	@return 	byte[]	a byte array of random data of size 'size'
    */
    public static byte[] genRandVal(int size)
    {
	byte[] seed = new byte[size];
	ThreadedSeedGenerator gen = new ThreadedSeedGenerator();
	seed = gen.generateSeed(size,false);
	return seed;
    }

    /*  Gets the iv generated by the KeyObjFactory genIV method
    *	@param	byte[] buf	a byte array to store the IV
    *	@param  maxsize		the maximum length of data to copy
    *	to iv
    *	@return int	the number of bytes copied
    *	@throws Exception if the number of bytes in iv exceeds maxsize
    */
    public static int getIV(byte[] buf,int maxsize) throws Exception
    {
	if(maxsize > iv.length)
	{
		Exception e = new Exception("Out of bounds!");
		
		throw e; 
	}
	System.arraycopy(iv,0 , buf, 0, iv.length);
	return iv.length;
    }
    public static void setIV(byte[] in)
    {
	iv = new byte[in.length];
	System.arraycopy(in,0 , iv, 0, in.length);

    }
    public static void setRandomSeed(byte[] in)
    {
	    seed = new byte[in.length];
	    System.arraycopy(in,0,seed,0,in.length);
    }
    public static KeyObj getKeyObj(byte[] clientid,byte[] firmid) {
	SHA256Digest d = new SHA256Digest();
	d.update(clientid, 0, clientid.length);
	d.update(firmid,0,firmid.length);
	d.finish();
	KDF2BytesGenerator kg = new KDF2BytesGenerator(d);
	KDFParameters kp = new KDFParameters(iv,secret);
	kg.init(kp);
	byte[] keyval = new byte[200];
	kg.generateBytes(keyval, 0, keyval.length);
        return new KeyObj(keyval,10);
    }
}
